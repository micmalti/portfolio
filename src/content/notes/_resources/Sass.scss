/*
Sass is a language extension of CSS and a CSS preprocessor: it accepts code written 
using Sass syntax and converts it into CSS. The syntaxes available for Sass are SCSS 
and Sass, an older syntax which uses indentation rather than brackets for nesting of
selectors, and newlines rather than semicolons to separate properties.
*/

// Unlike CSS, Sass uses variables preceeded by a $, both when declared and stated:
$txt-color: red;

// Sass supports nesting of CSS rules by placing child style rules within the respective
// parent elements:
.blog-post {
  h1 {
    text-align: center;
    color: blue;
  }
  p {
    font-size: 20px;
  }
}

// In Sass, a mixin is like a function for CSS, grouping together CSS declarations to
// be reused throughout the style sheet:
@mixin box-shadow($x, $y, $blur, $c) {
  -webkit-box-shadow: $x, $y, $blur, $c;
  -moz-box-shadow: $x, $y, $blur, $c;
  -ms-box-shadow: $x, $y, $blur, $c;
  box-shadow: $x, $y, $blur, $c;
}
div {
  @include box-shadow(0px, 0px, 4px, #fff); // adding vendor prefixes
}

// Sass supports if, else if, else statements:
@mixin text-effect($val) {
  @if $val == danger {
    color: red;
  } @else if $val == alert {
    color: yellow;
  } @else {
    color: black;
  }
}

// For loops in Sass come in two ways:
@for $i from 1 through 12 {
  .col-#{$i} {
    width: 100%/12 * $i;
  }
}
// which when converted to CSS looks like:
.col-1 {
  width: 8.33333%;
}
.col-2 {
  width: 16.66667%;
}
... .col-12 {
  width: 100%;
}
// and the other type uses "to" instead of "through", excluding the end number.

// The @while directive creates CSS rules until a condition is met:
$x: 1;
@while $x < 6 {
  .text-#{$x} {
    font-size: 15px * $x;
  }
  $x: $x + 1;
}

// The @each directive loops over each item in a list, assigning the variable to the
// item on each iteration:
@each $color in blue, red, green {
  .#{$color}-text {
    color: $color;
  }
}
// Objects can also be looped over:
$colors: (
  color1: blue,
  color2: red,
  color3: green
);
@each $key, $color in $colors {
  .#{$color}-text {
    color: $color;
  }
}

/*
Just like JavaScript modules, partials are separate files holding segments of CSS code
which can be imported and used in other Sass files. Names for partials should start 
with an _ but still end with the .scss extension. 
*/

// To import code _mixins.scss:
@import "mixins" // Using the @extend directive, you can borrow the CSS rules from one element and build
  //  upon them in another:
  .big-panel {
  @extend .panel;
  width: 150px;
  font-size: 2em;
}
